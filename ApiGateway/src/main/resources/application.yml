server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:

        - id: order-service
          uri: lb://ORDER-SERVICE
          #         클라이언트가 user-service로 시작되는 모든 요청을 USER-SERVICE쪽으로 포워딩 시킨다.
          predicates:
            - Path=/order-service/**

        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          #         클라이언트가 user-service로 시작되는 모든 요청을 USER-SERVICE쪽으로 포워딩 시킨다.
          predicates:
            - Path=/catalog-service/**


        - id: user-service
          uri: lb://USER-SERVICE
          # 클라이언트가 user-service login로 시작되는 모든 요청을 USER-SERVICE쪽으로 포워딩 시킨다.
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
#            - CustomFilter
        - id: user-service
          uri: lb://USER-SERVICE
          # 클라이언트가 user-service로 시작되는 모든 요청을 USER-SERVICE쪽으로 포워딩 시킨다.
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          # 클라이언트가 user-service로 시작되는 모든 요청을 USER-SERVICE쪽으로 포워딩 시킨다.
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter

        - id: user-service
          uri: lb://USER-SERVICE
          # 클라이언트가 user-service로 시작되는 모든 요청을 USER-SERVICE쪽으로 포워딩 시킨다.
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
            - CustomFilter
            #            추가적인 파라미터 넣을 때 name 넣는다.
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi, there
                preLogger: true
                postLogger: true



#
#
#token:
#  # 현재 임의의 값 최소 50글자
#  secret: 01234567890123456789012345678901234567890123456789


management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh




#  라우트 설정.
#  cloud:
#    gateway:
#      routes:
#        - id: first-service
#          uri: http://localhost:8081/
#          predicates:
#            - Path=/first-service/**
#        - id: second-service
#          uri: http://localhost:8082/
#          predicates:
#            - Path=/second-service/**